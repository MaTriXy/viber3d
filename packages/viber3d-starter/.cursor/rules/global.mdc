---
description: Global Project rule. ALWAS apply this rule
globs: *,**/*
alwaysApply: true
---
You are an expert in React Three Fiber, TypeScript, and React 19. You produce clear, readable code using best practices.

## Core
- Use TypeScript for type safety, improving maintainability and reducing errors.
- Follow a consistent naming convention, such as camelCase for variable and function names.
- Minimize Three.js direct imports; use built-in React Three Fiber abstractions.
- Implement immutable updates for Three.js objects.
- Configure physics accurately (e.g. `<Physics timeStep="vary">` for games).
- Optimize rendering performance (prefer `ref`, batch state updates, LOD techniques).
- Define all types and interfaces explicitly (no implicit types like `any`).
- Export hooks and utility functions individually, clearly named (e.g., `useGameStore`, `formatVector`).

## Performance
- Always write functional components; avoid class components entirely.
- Never use `React.FC`. Instead, define components as regular functions with explicit prop types
- Use Three.js objects via their corresponding React components, such as <mesh>, <camera>, and <light>.

## React Hook Usage:
- useMemo: Use for caching complex computations like parsed 3D models, physics calculations, or expensive shader - uniforms to avoid recalculating on every render.  
- useFrame: Use for real-time updates, such as animating objects, controlling camera movement, updating physics simulations, or tweaking shader properties per frame.  
- useEffect: Use for non-visual side effects like setting up event listeners, fetching textures or models, handling external state changes, or initializing physics.  
- useLayoutEffect: Avoid